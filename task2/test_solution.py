"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö Wikipedia (–ó–∞–¥–∞—á–∞ 2).
"""

import pytest
import csv
import os
from unittest.mock import Mock, patch, mock_open
from solution import WikipediaAnimalsParser


class TestWikipediaAnimalsParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö Wikipedia."""
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.parser = WikipediaAnimalsParser()
    
    def test_parser_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞."""
        assert self.parser.base_url == "https://ru.wikipedia.org"
        assert "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ñ–∏–≤–æ—Ç–Ω—ã–µ_–ø–æ_–∞–ª—Ñ–∞–≤–∏—Ç—É" in self.parser.start_url
        assert len(self.parser.russian_alphabet) == 33
        assert "–ê" in self.parser.russian_alphabet
        assert "–Ø" in self.parser.russian_alphabet
    
    def test_russian_alphabet_completeness(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞."""
        expected_letters = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–≠–Æ–Ø"
        assert self.parser.russian_alphabet == expected_letters
    
    @patch('solution.requests.Session.get')
    def test_process_page_success(self, mock_get):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        # –ú–æ–∫–∞–µ–º HTML –æ—Ç–≤–µ—Ç
        mock_html = """
        <html>
            <div id="mw-pages">
                <a href="/wiki/–ê–∏—Å—Ç">–ê–∏—Å—Ç</a>
                <a href="/wiki/–ë–µ–ª–∫–∞">–ë–µ–ª–∫–∞</a>
                <a href="/wiki/–í–æ–ª–∫">–í–æ–ª–∫</a>
            </div>
        </html>
        """
        
        mock_response = Mock()
        mock_response.content = mock_html.encode('utf-8')
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
        
        animals_count = {letter: 0 for letter in self.parser.russian_alphabet}
        
        result = self.parser._process_page("http://test.url", animals_count)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã–µ –±—ã–ª–∏ –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã
        assert animals_count['–ê'] == 1  # –ê–∏—Å—Ç
        assert animals_count['–ë'] == 1  # –ë–µ–ª–∫–∞
        assert animals_count['–í'] == 1  # –í–æ–ª–∫
        assert sum(animals_count.values()) == 3
    
    @patch('solution.requests.Session.get')
    def test_process_page_no_content(self, mock_get):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        mock_html = "<html><body>No content</body></html>"
        
        mock_response = Mock()
        mock_response.content = mock_html.encode('utf-8')
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
        
        animals_count = {letter: 0 for letter in self.parser.russian_alphabet}
        
        result = self.parser._process_page("http://test.url", animals_count)
        
        assert result is None
        assert sum(animals_count.values()) == 0
    
    def test_save_to_csv(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV —Ñ–∞–π–ª."""
        test_data = {'–ê': 5, '–ë': 3, '–í': 0, '–ì': 1}
        test_filename = "test_beasts.csv"
        
        try:
            self.parser.save_to_csv(test_data, test_filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            assert os.path.exists(test_filename)
            
            with open(test_filename, 'r', encoding='utf-8') as f:
                reader = csv.reader(f)
                rows = list(reader)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏)
            expected_rows = [['–ê', '5'], ['–ë', '3'], ['–ì', '1']]
            assert rows == expected_rows
            
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if os.path.exists(test_filename):
                os.remove(test_filename)
    
    @patch('builtins.open', side_effect=IOError("Permission denied"))
    def test_save_to_csv_error(self, mock_open):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV."""
        test_data = {'–ê': 5}
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É
        self.parser.save_to_csv(test_data, "test.csv")
    
    def test_print_statistics(self, capsys):
        """–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        test_data = {
            '–ê': 10, '–ë': 5, '–í': 0, '–ì': 1, '–î': 0,
            '–ï': 0, '–ñ': 0, '–ó': 0, '–ò': 0, '–ô': 0,
            '–ö': 0, '–õ': 0, '–ú': 0, '–ù': 0, '–û': 0,
            '–ü': 0, '–†': 0, '–°': 0, '–¢': 0, '–£': 0,
            '–§': 0, '–•': 0, '–¶': 0, '–ß': 0, '–®': 0,
            '–©': 0, '–≠': 0, '–Æ': 0, '–Ø': 0
        }
        
        self.parser.print_statistics(test_data)
        
        captured = capsys.readouterr()
        output = captured.out
        
        assert "–í—Å–µ–≥–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: 16" in output
        assert "–ë—É–∫–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏: 3" in output
        assert "–ê: 10" in output
        assert "–ë: 5" in output
        assert "–ì: 1" in output
    
    def test_find_next_page_link(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        from bs4 import BeautifulSoup
        
        # HTML —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        html_with_next = """
        <html>
            <body>
                <a href="/wiki/Category:Animals?from=–ë">—Å–ª–µ–¥—É—é—â–∏–µ 200</a>
            </body>
        </html>
        """
        
        soup = BeautifulSoup(html_with_next, 'html.parser')
        next_link = self.parser._find_next_page_link(soup)
        
        expected_url = "https://ru.wikipedia.org/wiki/Category:Animals?from=–ë"
        assert next_link == expected_url
    
    def test_find_next_page_link_not_found(self):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
        from bs4 import BeautifulSoup
        
        html_without_next = "<html><body>No next link</body></html>"
        soup = BeautifulSoup(html_without_next, 'html.parser')
        next_link = self.parser._find_next_page_link(soup)
        
        assert next_link is None


def run_manual_tests():
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest."""
    print("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö ===")
    
    parser = WikipediaAnimalsParser()
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    assert parser.base_url == "https://ru.wikipedia.org"
    assert len(parser.russian_alphabet) == 33
    print("‚úì –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
    
    # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    test_data = {'–ê': 5, '–ë': 3, '–í': 0, '–ì': 1}
    test_filename = "test_manual.csv"
    
    try:
        parser.save_to_csv(test_data, test_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        with open(test_filename, 'r', encoding='utf-8') as f:
            content = f.read()
            assert '–ê,5' in content
            assert '–ë,3' in content
            assert '–ì,1' in content
            assert '–í,0' not in content  # –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
        
        print("‚úì –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV")
        
    finally:
        if os.path.exists(test_filename):
            os.remove(test_filename)
    
    # –¢–µ—Å—Ç 3: –ê–ª—Ñ–∞–≤–∏—Ç
    expected_alphabet = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–≠–Æ–Ø"
    assert parser.russian_alphabet == expected_alphabet
    print("‚úì –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç")
    
    print("\nüéâ –í—Å–µ —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    run_manual_tests()
