"""
–¢–µ—Å—Ç—ã –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @strict (–ó–∞–¥–∞—á–∞ 1).
"""

import pytest
from solution import strict


class TestStrictDecorator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @strict."""
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
        
        @strict
        def sum_two(a: int, b: int) -> int:
            return a + b
        
        @strict
        def concat_strings(s1: str, s2: str) -> str:
            return s1 + s2
        
        @strict
        def multiply_float(x: float, y: float) -> float:
            return x * y
        
        @strict
        def check_bool(flag: bool) -> str:
            return "True" if flag else "False"
        
        @strict
        def mixed_types(num: int, text: str, flag: bool, decimal: float) -> str:
            return f"{num}-{text}-{flag}-{decimal}"
        
        self.sum_two = sum_two
        self.concat_strings = concat_strings
        self.multiply_float = multiply_float
        self.check_bool = check_bool
        self.mixed_types = mixed_types
    
    def test_correct_int_types(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        assert self.sum_two(1, 2) == 3
        assert self.sum_two(0, 0) == 0
        assert self.sum_two(-5, 10) == 5
    
    def test_incorrect_int_types(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        with pytest.raises(TypeError, match="must be of type int"):
            self.sum_two(1, 2.4)
        
        with pytest.raises(TypeError, match="must be of type int"):
            self.sum_two("1", 2)
        
        with pytest.raises(TypeError, match="must be of type int"):
            self.sum_two(1.0, 2)
    
    def test_correct_string_types(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        assert self.concat_strings("hello", "world") == "helloworld"
        assert self.concat_strings("", "test") == "test"
        assert self.concat_strings("a", "") == "a"
    
    def test_incorrect_string_types(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        with pytest.raises(TypeError, match="must be of type str"):
            self.concat_strings("hello", 123)
        
        with pytest.raises(TypeError, match="must be of type str"):
            self.concat_strings(123, "world")
    
    def test_correct_float_types(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π."""
        assert self.multiply_float(2.5, 3.0) == 7.5
        assert self.multiply_float(0.0, 5.5) == 0.0
        assert self.multiply_float(-2.5, 2.0) == -5.0
    
    def test_incorrect_float_types(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π."""
        with pytest.raises(TypeError, match="must be of type float"):
            self.multiply_float(2, 3.0)
        
        with pytest.raises(TypeError, match="must be of type float"):
            self.multiply_float(2.5, 3)
    
    def test_correct_bool_types(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±—É–ª–µ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        assert self.check_bool(True) == "True"
        assert self.check_bool(False) == "False"
    
    def test_incorrect_bool_types(self):
        """–¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –±—É–ª–µ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        with pytest.raises(TypeError, match="must be of type bool"):
            self.check_bool(1)
        
        with pytest.raises(TypeError, match="must be of type bool"):
            self.check_bool(0)
        
        with pytest.raises(TypeError, match="must be of type bool"):
            self.check_bool("True")
    
    def test_mixed_types_correct(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""
        result = self.mixed_types(42, "test", True, 3.14)
        assert result == "42-test-True-3.14"
    
    def test_mixed_types_incorrect(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""
        with pytest.raises(TypeError):
            self.mixed_types("42", "test", True, 3.14)  # str –≤–º–µ—Å—Ç–æ int
        
        with pytest.raises(TypeError):
            self.mixed_types(42, 123, True, 3.14)  # int –≤–º–µ—Å—Ç–æ str
        
        with pytest.raises(TypeError):
            self.mixed_types(42, "test", 1, 3.14)  # int –≤–º–µ—Å—Ç–æ bool
        
        with pytest.raises(TypeError):
            self.mixed_types(42, "test", True, 3)  # int –≤–º–µ—Å—Ç–æ float
    
    def test_keyword_arguments(self):
        """–¢–µ—Å—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        assert self.sum_two(a=1, b=2) == 3
        assert self.sum_two(b=2, a=1) == 3
        
        with pytest.raises(TypeError):
            self.sum_two(a=1, b=2.5)
    
    def test_mixed_positional_and_keyword(self):
        """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        assert self.sum_two(1, b=2) == 3
        
        with pytest.raises(TypeError):
            self.sum_two(1, b=2.5)


def run_manual_tests():
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest."""
    print("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @strict ===")
    
    @strict
    def sum_two(a: int, b: int) -> int:
        return a + b
    
    @strict
    def concat_strings(s1: str, s2: str) -> str:
        return s1 + s2
    
    @strict
    def multiply_float(x: float, y: float) -> float:
        return x * y
    
    @strict
    def check_bool(flag: bool) -> str:
        return "True" if flag else "False"
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã
    assert sum_two(1, 2) == 3
    print("‚úì –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: sum_two(1, 2) = 3")
    
    # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã - –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å TypeError
    try:
        sum_two(1, 2.4)
        assert False, "Should have raised TypeError"
    except TypeError:
        print("‚úì –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: sum_two(1, 2.4) –≤—ã–∑–≤–∞–ª TypeError")
    
    # –¢–µ—Å—Ç 3: –°—Ç—Ä–æ–∫–∏
    assert concat_strings("hello", "world") == "helloworld"
    print("‚úì –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: concat_strings —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è —Å—Ç—Ä–æ–∫
    try:
        concat_strings("hello", 123)
        assert False, "Should have raised TypeError"
    except TypeError:
        print("‚úì –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: concat_strings —Å int –≤—ã–∑–≤–∞–ª TypeError")
    
    # –¢–µ—Å—Ç 5: Float
    assert multiply_float(2.5, 3.0) == 7.5
    print("‚úì –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: multiply_float —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 6: Bool
    assert check_bool(True) == "True"
    assert check_bool(False) == "False"
    print("‚úì –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: check_bool —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 7: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è bool
    try:
        check_bool(1)  # int –≤–º–µ—Å—Ç–æ bool
        assert False, "Should have raised TypeError"
    except TypeError:
        print("‚úì –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: check_bool —Å int –≤—ã–∑–≤–∞–ª TypeError")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    run_manual_tests()
