"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ appearance (–ó–∞–¥–∞—á–∞ 3).
"""

import pytest
from solution import appearance, debug_appearance


class TestAppearanceFunction:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ appearance."""
    
    def test_provided_test_case_1(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è."""
        intervals = {
            'lesson': [1594663200, 1594666800],
            'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
            'tutor': [1594663290, 1594663430, 1594663443, 1594666473]
        }
        expected = 3117
        result = appearance(intervals)
        assert result == expected, f"Expected {expected}, got {result}"
    
    def test_provided_test_case_2(self):
        """–¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è."""
        intervals = {
            'lesson': [1594702800, 1594706400],
            'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 
                     1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009, 
                     1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773, 
                     1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503, 
                     1594706524, 1594706524, 1594706579, 1594706641],
            'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]
        }
        expected = 3577
        result = appearance(intervals)
        assert result == expected, f"Expected {expected}, got {result}"
    
    def test_provided_test_case_3(self):
        """–¢–µ—Å—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è."""
        intervals = {
            'lesson': [1594692000, 1594695600],
            'pupil': [1594692033, 1594696347],
            'tutor': [1594692017, 1594692066, 1594692068, 1594696341]
        }
        expected = 3565
        result = appearance(intervals)
        assert result == expected, f"Expected {expected}, got {result}"
    
    def test_no_intersection(self):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [50, 90],
            'tutor': [210, 250]
        }
        expected = 0
        result = appearance(intervals)
        assert result == expected
    
    def test_full_overlap(self):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [100, 200],
            'tutor': [100, 200]
        }
        expected = 100
        result = appearance(intervals)
        assert result == expected
    
    def test_partial_overlap(self):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [150, 250],
            'tutor': [50, 175]
        }
        expected = 25  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å 150 –ø–æ 175
        result = appearance(intervals)
        assert result == expected
    
    def test_multiple_pupil_intervals(self):
        """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ —É—á–µ–Ω–∏–∫–∞."""
        intervals = {
            'lesson': [100, 300],
            'pupil': [110, 130, 140, 160, 170, 190],
            'tutor': [105, 195]
        }
        # –£—á–µ–Ω–∏–∫: (110,130), (140,160), (170,190)
        # –£—á–∏—Ç–µ–ª—å: (105,195)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: (110,130)=20, (140,160)=20, (170,190)=20
        # –ò—Ç–æ–≥–æ: 60
        expected = 60
        result = appearance(intervals)
        assert result == expected
    
    def test_multiple_tutor_intervals(self):
        """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ —É—á–∏—Ç–µ–ª—è."""
        intervals = {
            'lesson': [100, 300],
            'pupil': [105, 195],
            'tutor': [110, 130, 140, 160, 170, 190]
        }
        # –£—á–∏—Ç–µ–ª—å: (110,130), (140,160), (170,190)
        # –£—á–µ–Ω–∏–∫: (105,195)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: (110,130)=20, (140,160)=20, (170,190)=20
        # –ò—Ç–æ–≥–æ: 60
        expected = 60
        result = appearance(intervals)
        assert result == expected
    
    def test_overlapping_intervals(self):
        """–¢–µ—Å—Ç —Å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏."""
        intervals = {
            'lesson': [100, 300],
            'pupil': [110, 150, 140, 180],  # –ü–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            'tutor': [105, 195]
        }
        # –£—á–µ–Ω–∏–∫ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: (110, 180)
        # –£—á–∏—Ç–µ–ª—å: (105, 195)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: (110, 180) = 70
        expected = 70
        result = appearance(intervals)
        assert result == expected
    
    def test_outside_lesson_time(self):
        """–¢–µ—Å—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [50, 150, 180, 250],  # –ß–∞—Å—Ç–∏—á–Ω–æ –≤–Ω–µ —É—Ä–æ–∫–∞
            'tutor': [75, 175, 190, 300]   # –ß–∞—Å—Ç–∏—á–Ω–æ –≤–Ω–µ —É—Ä–æ–∫–∞
        }
        # –£—á–µ–Ω–∏–∫ –≤ —Ä–∞–º–∫–∞—Ö —É—Ä–æ–∫–∞: (100, 150)
        # –£—á–∏—Ç–µ–ª—å –≤ —Ä–∞–º–∫–∞—Ö —É—Ä–æ–∫–∞: (100, 175)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: (100, 150) = 50
        expected = 50
        result = appearance(intervals)
        assert result == expected
    
    def test_touching_intervals(self):
        """–¢–µ—Å—Ç —Å –∫–∞—Å–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏."""
        intervals = {
            'lesson': [100, 300],
            'pupil': [110, 150, 150, 190],  # –ö–∞—Å–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            'tutor': [105, 195]
        }
        # –£—á–µ–Ω–∏–∫ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: (110, 190)
        # –£—á–∏—Ç–µ–ª—å: (105, 195)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: (110, 190) = 80
        expected = 80
        result = appearance(intervals)
        assert result == expected
    
    def test_empty_intervals(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [],
            'tutor': [110, 150]
        }
        expected = 0
        result = appearance(intervals)
        assert result == expected
    
    def test_single_point_intervals(self):
        """–¢–µ—Å—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã."""
        intervals = {
            'lesson': [100, 200],
            'pupil': [110, 110, 120, 130],  # –û–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã
            'tutor': [105, 125]
        }
        # –£—á–µ–Ω–∏–∫: (120, 130)
        # –£—á–∏—Ç–µ–ª—å: (105, 125)
        # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: (120, 125) = 5
        expected = 5
        result = appearance(intervals)
        assert result == expected


def run_manual_tests():
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest."""
    print("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ appearance ===")
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = [
        {'intervals': {'lesson': [1594663200, 1594666800],
                 'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
                 'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
         'answer': 3117
        },
        {'intervals': {'lesson': [1594702800, 1594706400],
                 'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503, 1594706524, 1594706524, 1594706579, 1594706641],
                 'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]},
        'answer': 3577
        },
        {'intervals': {'lesson': [1594692000, 1594695600],
                 'pupil': [1594692033, 1594696347],
                 'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
        'answer': 3565
        },
    ]

    print("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    for i, test in enumerate(tests):
        test_answer = appearance(test['intervals'])
        expected = test['answer']
        
        print(f"–¢–µ—Å—Ç {i+1}: –ø–æ–ª—É—á–µ–Ω–æ {test_answer}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}")
        assert test_answer == expected, f'–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i+1}: –ø–æ–ª—É—á–µ–Ω–æ {test_answer}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}'
        print(f"‚úì –¢–µ—Å—Ç {i+1} –ø—Ä–æ–π–¥–µ–Ω")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    
    # –¢–µ—Å—Ç: –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    test1 = {
        'lesson': [100, 200],
        'pupil': [50, 90],
        'tutor': [210, 250]
    }
    assert appearance(test1) == 0
    print("‚úì –¢–µ—Å—Ç –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç: –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    test2 = {
        'lesson': [100, 200],
        'pupil': [100, 200],
        'tutor': [100, 200]
    }
    assert appearance(test2) == 100
    print("‚úì –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç: —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    test3 = {
        'lesson': [100, 200],
        'pupil': [150, 250],
        'tutor': [50, 175]
    }
    assert appearance(test3) == 25
    print("‚úì –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    run_manual_tests()
